<?xml version="1.0" standalone="yes"?>
<!-- SIP Application Configuration File -->
<sip>
  <voIpProt>
    <local
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.SIP').getSetting('local'))
#foreach ($setting in $cfg.getSettings($group))
      voIpProt.local.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    <server
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.server.dhcp'))
#foreach ($setting in $cfg.getSettings($group))
      voIpProt.server.dhcp.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    <SIP
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.SIP').getSetting('protocol'))
#foreach ($setting in $cfg.getSettings($group))
      voIpProt.SIP.${setting.ProfileName}="$!{setting.Value}"
#end
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.SIP').getSetting('serverFeatureControl'))
#foreach ($setting in $cfg.getSettings($group))
      voIpProt.SIP.serverFeatureControl.${setting.ProfileName}="$!{setting.Value}"
#end
    >
      <outboundProxy
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt').getSetting('SIP.outboundProxy'))
#foreach ($setting in $cfg.getSettings($group))
        voIpProt.SIP.outboundProxy.${setting.ProfileName}="$!{setting.Value}"
#end
      />
      <alertInfo
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.SIP').getSetting('alertInfo'))
#foreach ($subgroup in $group.Values)
#set ($parentProfileName = $subgroup.ProfileName)
#foreach ($setting in $subgroup.Values)
        voIpProt.SIP.alertInfo.${parentProfileName}.${setting.ProfileName}="$!{setting.Value}"
#end
#end
      />
      <requestValidation
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.SIP').getSetting('requestValidation'))
#foreach ($subgroup in $group.Values)
#set ($parentProfileName = $subgroup.ProfileName)
#foreach ($setting in $subgroup.Values)
        voIpProt.SIP.requestValidation.${parentProfileName}.${setting.ProfileName}="$!{setting.Value}"
#end
#end
      >
        <digest
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.SIP').getSetting('digest'))
#foreach ($setting in $cfg.getRecursiveSettings($group))
          voIpProt.SIP.requestValidation.digest.${setting.ProfileName}="$!{setting.Value}"
#end
        />
      </requestValidation>
      <specialEvent
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.SIP').getSetting('specialEvent'))
#foreach ($setting in $cfg.getSettings($group))
        voIpProt.SIP.specialEvent.${setting.ProfileName}="$!{setting.Value}"
#end
      />
      <conference
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.SIP').getSetting('conference'))
#foreach ($setting in $cfg.getSettings($group))
        voIpProt.SIP.conference.${setting.ProfileName}="$!{setting.Value}"
#end
      />
      <dialog
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.SIP').getSetting('dialog'))
#foreach ($setting in $cfg.getSettings($group))
        voIpProt.SIP.dialog.${setting.ProfileName}="$!{setting.Value}"
#end
      />
      <connectionReuse
#set ($group = $cfg.EndpointSettings.getSetting('voIpProt.SIP').getSetting('connectionReuse'))
#foreach ($setting in $cfg.getSettings($group))
        voIpProt.SIP.connectionReuse.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </SIP>
  </voIpProt>
## SIMILIAR DIALPLAN SECTION EXISTS IN phone.cfg.vm
## to control dialplans for each line
  <dialplan
#set ($group = $cfg.EndpointSettings.getSetting('dialplan'))
#foreach ($setting in $cfg.getSettings($group))
    dialplan.${setting.ProfileName}="$!{setting.Value}"
#end
  >
    <digitmap
#set ($group = $cfg.EndpointSettings.getSetting('dialplan').getSetting('digitmap'))
#foreach ($setting in $cfg.getSettings($group))
      dialplan.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    <routing>
      <server
#set ($group = $cfg.EndpointSettings.getSetting('dialplan').getSetting('digitmap').getSetting('routing.1'))
        dialplan.routing.server.1.address="$!{group.getSetting('address').Value}"
        dialplan.routing.server.1.port="$!{group.getSetting('port').Value}"
      />
      <emergency
#set ($group = $cfg.EndpointSettings.getSetting('dialplan').getSetting('digitmap').getSetting('routing.1'))
#set ($index = 1)
#foreach ($emergencyVal in $cfg.EmergencySetting)
        dialplan.routing.emergency.${index}.value="$!{emergencyVal}"
#set ($index = $index+1)
#end
      />
    </routing>
  </dialplan>
##
## ----------- ipmd.cfg < 1.5.2 ------------------
##
  <localization>
    <multilingual>
#set ($setting = $cfg.EndpointSettings.getSetting('localization/language'))
      <language lcl.ml.lang="$!{setting.Value}">
      </language>
    </multilingual>
    <datetime>
      <time
#set ($group = $cfg.EndpointSettings.getSetting('lcl').getSetting('time'))
#foreach ($setting in $cfg.getSettings($group))
        lcl.datetime.time.${setting.ProfileName}="$!{setting.Value}"
#end
      />
      <date
#set ($group = $cfg.EndpointSettings.getSetting('lcl').getSetting('datetime'))
#foreach ($setting in $cfg.getSettings($group))
        lcl.datetime.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </datetime>
  </localization>
  <user_preferences
#set ($group = $cfg.EndpointSettings.getSetting('up'))
#foreach ($setting in $cfg.getSettings($group))
#if ($setting.ProfileName != "analogHeadsetOption")
    up.${setting.ProfileName}="$!{setting.Value}"
#end
#end
  />
  <tones>
    <DTMF
#set ($group = $cfg.EndpointSettings.getSetting('tone.dtmf'))
#foreach ($setting in $cfg.getSettings($group))
      tone.dtmf.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </tones>
  <sound_effects
#set ($group = $cfg.EndpointSettings.getSetting('se'))
#foreach ($setting in $cfg.getSettings($group))
    se.${setting.ProfileName}="$!{setting.Value}"
#end
  >
    <patterns>
      <CALLPROGRESS>
#set ($setting_type = $cfg.EndpointSettings.getSetting('se/CALL_WAITING/type'))
#set ($setting_value = $cfg.EndpointSettings.getSetting('se/CALL_WAITING/value'))
        <CALLWAITING
          se.pat.callProg.6.name="call waiting"
          se.pat.callProg.6.inst.1.type="$!{setting_type.Value}"
          se.pat.callProg.6.inst.1.value="$!{setting_value.Value}"
        />
#set ($setting_type1 = $cfg.EndpointSettings.getSetting('se/LONG_CALL_WAITING/1-type'))
#set ($setting_value1 = $cfg.EndpointSettings.getSetting('se/LONG_CALL_WAITING/1-value'))
#set ($setting_type2 = $cfg.EndpointSettings.getSetting('se/LONG_CALL_WAITING/2-type'))
#set ($setting_value2 = $cfg.EndpointSettings.getSetting('se/LONG_CALL_WAITING/2-value'))
#set ($setting_type3 = $cfg.EndpointSettings.getSetting('se/LONG_CALL_WAITING/3-type'))
#set ($setting_value3 = $cfg.EndpointSettings.getSetting('se/LONG_CALL_WAITING/3-value'))
        <CALLWAITINGLONG
          se.pat.callProg.7.name="long call waiting"
          se.pat.callProg.7.inst.1.type="$!{setting_type1.Value}"
          se.pat.callProg.7.inst.1.value="$!{setting_value1.Value}"
          se.pat.callProg.7.inst.2.type="$!{setting_type2.Value}"
          se.pat.callProg.7.inst.2.value="$!{setting_value2.Value}"
          se.pat.callProg.7.inst.3.type="$!{setting_type3.Value}"
          se.pat.callProg.7.inst.3.value="$!{setting_value3.Value}"
        />
      </CALLPROGRESS>
      <MISCELLANEOUS>
## XCF-840 this setting exposed because its the most annoying
##  most people just want the option to silence it
#set ($setting = $cfg.EndpointSettings.getSetting('se/patterns/MESSAGE_WAITING/type'))
        <MESSAGE_WAITING
          se.pat.misc.1.name="message waiting"
          se.pat.misc.1.inst.1.type="$!{setting.Value}"
          se.pat.misc.1.inst.1.value="1"
          se.pat.misc.1.inst.2.type="$!{setting.Value}"
          se.pat.misc.1.inst.2.value="2"
          se.pat.misc.1.inst.3.type="$!{setting.Value}"
          se.pat.misc.1.inst.3.value="1"
        />
      </MISCELLANEOUS>
    </patterns>
    <ringType se.rt.enabled="1" se.rt.modification.enabled="1">
##    <!-- Ring classes 3 and 4 are used by the Intercom feature -->
#set ($ringAnswer = $cfg.EndpointSettings.getSetting('se/ringType/RING_ANSWER'))
      <RING_ANSWER
        se.rt.4.name="Ring Answer"
        se.rt.4.type="ring-answer"
        se.rt.4.timeout="$!{ringAnswer.getSetting('timeout').Value}"
        se.rt.4.ringer="$!{ringAnswer.getSetting('ringer').Value}"
        se.rt.4.callWait="$!{ringAnswer.getSetting('callWait').Value}"
        se.rt.4.mod="$!{ringAnswer.getSetting('mod').Value}"
      />
    </ringType>
  </sound_effects>
  <voice
#set ($group = $cfg.EndpointSettings.getSetting('voice'))
#foreach ($setting in $cfg.getSettings($group))
    voice.${setting.ProfileName}="$!{setting.Value}"
#end
  >
    <codecs>
      <preferences
#set ($group = $cfg.EndpointSettings.getSetting('voice').getSetting('codecPref'))
#foreach ($setting in $cfg.getSettings($group))
        voice.codecPref.${setting.ProfileName}="$!{setting.Value}"
#end
      />
      <profiles
#set ($group = $cfg.EndpointSettings.getSetting('voice').getSetting('audioProfile'))
#foreach ($subgroup in $group.Values)
#set ($parentProfileName = $subgroup.ProfileName)
#foreach ($setting in $subgroup.Values)
        voice.audioProfile.${parentProfileName}.${setting.ProfileName}="$!{setting.Value}"
#end
#end
      />
    </codecs>
    <volume
#set ($group = $cfg.EndpointSettings.getSetting('voice').getSetting('volume'))
#foreach ($setting in $cfg.getSettings($group))
      voice.volume.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    <VAD
#set ($group = $cfg.EndpointSettings.getSetting('voice').getSetting('vad'))
#foreach ($setting in $cfg.getSettings($group))
      voice.${setting.ProfileName}="$!{setting.Value}"
#end
    />
#if ($phone.model.qualityMonitoringSupported)
    <qualityMonitoring>
#set ($group = $cfg.EndpointSettings.getSetting('qualityMonitoring').getSetting('collector'))
        <collector
#foreach ($setting in $cfg.getSettings($group))
            voice.qualityMonitoring.collector.${setting.ProfileName}="$!{setting.Value}"
#end
        >
#set ($group = $cfg.EndpointSettings.getSetting('qualityMonitoring').getSetting('collector').getSetting('alert'))
            <alert
#foreach ($setting in $cfg.getSettings($group))
              voice.qualityMonitoring.collector.alert.${setting.ProfileName}="$!{setting.Value}"
#end
            />
#set ($group = $cfg.EndpointSettings.getSetting('qualityMonitoring').getSetting('collector').getSetting('server'))
            <server
              voice.qualityMonitoring.collector.server.1.address="$!group.getSetting('address').Value"
              voice.qualityMonitoring.collector.server.1.port="$!group.getSetting('port').Value"
            />
        </collector>
#set ($group = $cfg.EndpointSettings.getSetting('qualityMonitoring').getSetting('rtcpxr'))
        <rtcpxr
#foreach ($setting in $cfg.getSettings($group))
          voice.qualityMonitoring.rtcpxr.${setting.ProfileName}="$!{setting.Value}"
#end
        />
    </qualityMonitoring>
#end
  </voice>
  <QOS>
    <Ethernet>
#set ($group = $cfg.EndpointSettings.getSetting('qos').getSetting('ethernet'))
#set ($setting = $group.getSetting('rtp.user_priority'))
      <RTP qos.ethernet.${setting.ProfileName}="$!{setting.Value}" />
#set ($setting = $group.getSetting('callControl.user_priority'))
      <CallControl qos.ethernet.${setting.ProfileName}="$!{setting.Value}" />
#set ($setting = $group.getSetting('other.user_priority'))
      <Other qos.ethernet.${setting.ProfileName}="$!{setting.Value}" />
    </Ethernet>
    <IP>
      <RTP
#set ($group = $cfg.EndpointSettings.getSetting('qos').getSetting('ip.rtp'))
#foreach ($setting in $cfg.getSettings($group))
        qos.ip.rtp.${setting.ProfileName}="$!{setting.Value}"
#end
      />
      <CallControl
#set ($group = $cfg.EndpointSettings.getSetting('qos').getSetting('ip.callControl'))
#foreach ($setting in $cfg.getSettings($group))
        qos.ip.callControl.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </IP>
  </QOS>
  <TCP_IP>
    <SNTP
#set ($group = $cfg.EndpointSettings.getSetting('tcpIpApp.sntp'))
#foreach ($setting in $cfg.getSettings($group))
      tcpIpApp.sntp.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    <port>
      <RTP
#set ($group = $cfg.EndpointSettings.getSetting('tcpIpApp.port.rtp'))
#foreach ($setting in $cfg.getSettings($group))
        tcpIpApp.port.rtp.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </port>
    <keepalive
#set ($group = $cfg.EndpointSettings.getSetting('tcpIpApp.keepalive.tcp'))
#foreach ($setting in $cfg.getSettings($group))
      tcpIpApp.keepalive.tcp.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </TCP_IP>
  <HTTPD
#set ($group = $cfg.EndpointSettings.getSetting('httpd'))
#foreach ($setting in $cfg.getSettings($group))
    httpd.${setting.ProfileName}="$!{setting.Value}"
#end
  >
    <cfg
#set ($group = $cfg.EndpointSettings.getSetting('httpd').getSetting('cfg'))
#foreach ($setting in $cfg.getSettings($group))
      httpd.cfg.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </HTTPD>
  <call
#foreach ($setting in ${call})
    call.${setting.ProfileName}="$!{setting.Value}"
#end
    call.stickyAutoLineSeize=""
    call.stickyAutoLineSeize.onHookDialing=""
    call.cellPhoneAutoBridging="disabled"
  >
    <shared
#set ($group = $cfg.EndpointSettings.getSetting('call').getSetting('shared'))
#foreach ($setting in $cfg.getSettings($group))
      call.shared.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    <hold>
      <localReminder
#set ($group = $cfg.EndpointSettings.getSetting('call.hold.localReminder'))
#foreach ($setting in $cfg.getSettings($group))
        call.hold.localReminder.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </hold>
  </call>
  <directory
#set ($group = $cfg.EndpointSettings.getSetting('directory'))
#foreach ($setting in $cfg.getRecursiveSettings($group))
    ${setting.ProfileName}="$!{setting.Value}"
#end
  />
  <presence
#set ($group = $cfg.EndpointSettings.getSetting('presence'))
#foreach ($setting in $cfg.getRecursiveSettings($group))
    ${setting.ProfileName}="$!{setting.Value}"
#end
  />
  <keys
#set ($group = $cfg.EndpointSettings.getSetting('key'))
#foreach ($setting in $cfg.getSettings($group))
    key.${setting.ProfileName}="$!{setting.Value}"
#end
  />
  <logging>
    <level>
      <change
#set ($group = $cfg.EndpointSettings.getSetting('log').getSetting('level.change'))
#foreach($levelSetting in $group.Values)
        log.level.change.${levelSetting.Name}="${levelSetting.Value}"
#end
      />
    </level>
    <render
#set ($group = $cfg.EndpointSettings.getSetting('log').getSetting('render'))
#foreach ($setting in $cfg.getSettings($group))
      log.render.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </logging>
  <security
#set ($group = $cfg.EndpointSettings.getSetting('sec'))
#foreach ($setting in $cfg.getSettings($group))
    sec.${setting.ProfileName}="$!{setting.Value}"
#end
  >
    <pwd>
      <length
#set ($group = $cfg.EndpointSettings.getSetting('sec').getSetting('pwd.length'))
#foreach ($setting in $cfg.getSettings($group))
        sec.pwd.length.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </pwd>
    <SRTP
#set ($group = $cfg.EndpointSettings.getSetting('sec').getSetting('srtp'))
#foreach ($setting in $cfg.getSettings($group))
      sec.srtp.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </security>
  <request>
    <delay
#set ($group = $cfg.EndpointSettings.getSetting('request.delay'))
#foreach ($setting in $cfg.getSettings($group))
      request.delay.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </request>
  <feature
#set ($group = $cfg.EndpointSettings.getSetting('feature'))
#foreach ($setting in $cfg.getSettings($group))
#set ($i = $velocityCount)
    feature.${i}.name="${setting.ProfileName}"
    feature.${i}.enabled="$!{setting.Value}"
#end
  />
  <microbrowser
#set ($group = $cfg.EndpointSettings.getSetting('mb'))
#foreach ($setting in $cfg.getSettings($group))
    mb.${setting.ProfileName}="$!{setting.Value}"
#end
  >
    <main
#set ($group = $cfg.EndpointSettings.getSetting('mb').getSetting('main'))
#foreach ($setting in $cfg.getSettings($group))
      mb.main.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    <idleDisplay
#set ($group = $cfg.EndpointSettings.getSetting('mb').getSetting('idleDisplay'))
#foreach ($setting in $cfg.getSettings($group))
      mb.idleDisplay.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    <limits
#set ($group = $cfg.EndpointSettings.getSetting('mb').getSetting('limits'))
#foreach ($setting in $cfg.getSettings($group))
      mb.limits.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </microbrowser>
#if ($phone.model.modelId == "polycom7000")
  <pnet
#set ($group = $cfg.EndpointSettings.getSetting('pnet'))
#foreach ($setting in $cfg.getSettings($group))
      pnet.${setting.ProfileName}="$!{setting.Value}"
#end
  />
#end
</sip>

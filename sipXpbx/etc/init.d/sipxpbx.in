#!/bin/bash
#
# chkconfig: 35 90 10
# description: This script starts up the sipXpbx processes.
#              Most of the real startup is done by the sipxsupervisor - it starts
#              up all other sipXecs processes and ensures that they are
#              operating properly. It restarts them if they exit unexpectedly,
#              and notifies the administrator of the failure.
#
# processname: sipxpbx
# pidfile: @SIPX_RUNDIR@/sipxsupervisor.pid
#
# Copyright (C) 2007 Pingtel Corp., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the LGPL license.
#
### BEGIN INIT INFO
# Provides:       sipxpbx
# Required-Start: $network $remote_fs
# Required-Stop:
# Default-Start:  3 5
# Default-Stop:
# Description:    Start the sipXpbx IP PBX application servers
### END INIT INFO

# This is an interactive program; we need the current locale.
[ -f /etc/profile.d/lang.sh ] && . /etc/profile.d/lang.sh

if [ "$LANG" = "ja" -o "$LANG" = "ja_JP.eucJP" ]; then
    # We can't Japanese on normal console at boot time.
    # So, force to set LANG=C
    if [ "$TERM" = "linux" ] ; then
        LANG=C
    fi
fi

## Source function library.
. @SIPX_LIBEXECDIR@/sipx-utils.sh || exit 1


# Source configuration
. @SIPX_CONFDIR@/config.defs

iam=`whoami`

# Set the limit for core file size based on the SIPX_CORELIMIT
# variable in config.defs.
# This either allows core files to be generated when sipXecs
# processes crash (if SIPX_CORELIMIT is "unlimited"), or
# disallows it (if SIPX_CORELIMIT is "0").
ulimit -c ${SIPX_CORELIMIT:-0}

## if we are configured to create core files,
## and this system is capable of creating core files for setuid
## executables, set it to create those core files (read-only to root).
## this allows debugging of sipXvxml crashes

if [ "${SIPX_CORELIMIT}" = "unlimited" -a -w /proc/sys/kernel/suid_dumpable ]
  then
    # RHEL uses this
    echo 2 > /proc/sys/kernel/suid_dumpable
  fi
if [ "${SIPX_CORELIMIT}" = "unlimited" -a -w /proc/sys/fs/suid_dumpable ]
  then
    # FC4 and kernel.org use this
    echo 1 > /proc/sys/fs/suid_dumpable

    ## According to the PROC man page /proc/sys/fs/suid_dumpable has
    ## the following behavior:
    ##   0 (default)
    ##   1 ("debug") All processes dump core when possible
    ##   2 ("suidsafe") Any binary which normally would not be dumped
    ##     (see "0" above) is dumped readable by root only.
    ## However experimentation shows 2 doesn't seem to work
    ## (with sipXvxml on FC4, anyway), and 1
    ## creates core dumps that are only readable by root.
    ## So lets use 1 for now until proven otherwise.
fi

# Find the name of the process, use process_name.sh if found
# and executable otherwise use process_name
process_command() {
  proc_cmd="@bindir@/${1}"
  proc_cmd_sh="${proc_cmd}.sh"
  if [ -x "${proc_cmd_sh}" ]; then
    echo -n "${proc_cmd_sh}"
    return
  fi
  echo -n "${proc_cmd}"
}

#
#XECS-2063 : Java Keystore setup. This code is migrated from sipxconfig.sh
#
SslDir=@SIPX_CONFDIR@/ssl
AuthoritiesDir=$SslDir/authorities

createAuthoritiesTruststore() {    
    # List of authorities accepted system-wide
    if [ -d $AuthoritiesDir ]
    then
      TrustStore=$SslDir/.authorities.jks
      @SIPX_BINDIR@/ssl-cert/create-ssl-truststore.sh --checksum $SslDir/.authorities-contents.md5 \
          --truststore $TrustStore --ca-path $AuthoritiesDir
      # password on command line is not security issue. catrust and directory has appropriate
      # permissions, password is required by keystores
    else
      echo_failure    
      STATUS=1
    fi
}

# Create a keystore and set-up the command-line options to supply it to the JVM.
createAuthoritiesKeystore() { 
    @SIPX_BINDIR@/ssl-cert/create-ssl-keystore.sh
}

# Low-level start function.
# We wait after the fork and see if the .pid file was created
start() { # process-name
        proc_name=$1; shift
        proc_cmd=`process_command ${proc_name}`

        echo -n $"Starting $proc_name: "

        if [ $iam = @SIPXPBXUSER@ ]
        then
            ( exec $proc_cmd ) < /dev/null &
        elif [ $iam = root ]
        then

            $proc_cmd < /dev/null &

        else
            echo "You must be able to start as @SIPXPBXUSER@" 1>&2
            echo_failure
            exit 1
        fi

        for ticks in 3 2 1 0
        do
           sleep 1
           test -e @SIPX_RUNDIR@/$proc_name.pid && break || echo -n "."
        done

        if [ -e @SIPX_RUNDIR@/$proc_name.pid ]
        then
            echo_success
        else
            STATUS=1
            echo_failure
        fi

        echo
	createAuthoritiesKeystore
	createAuthoritiesTruststore
        return $STATUS
}


# Low-level stop function.
stop() {
   proc_name=$1; shift

   echo -n "  Stopping: $proc_name "
   STATUS=0

   pidFile=@SIPX_RUNDIR@/$proc_name.pid
   if [ ! -r ${pidFile} ]
   then
      echo "(Not started) "
   else
       PID=`cat ${pidFile} 2> /dev/null`

       if ! proc_alive $PID
       then
          echo "(Started but not running) "
          rm -f ${pidFile}
       else
          echo ""
          kill $PID 2> /dev/null
       fi
   fi
}

stopCheck() {
    local proc_name=$1; shift
    local pidFile=@SIPX_RUNDIR@/${proc_name}.pid
    sipx_stop ${proc_name} ${pidFile}
}

# Low-level configtest function for internal tests defined by some global_*_check function here.
globaltest () { # test_name must_pass test_string
    local test_name
    test_name=$1
    local must_pass
    must_pass=${2:-"MAY_FAIL"}
    local test_string
    test_string=${3:-"$test_name"}

    local test_status
    test_status=0

    start_check "${test_string}"
    global_${test_name}_check >> ${steperrfile} 2>&1
    test_status=$?
    finish_check $test_status "${test_string}"
    ## abort if the test failed and must_pass
    if test ${test_status} -ne 0 -a "${must_pass}" = "MUST_PASS"
    then
        log_results
        exit 1
    fi

    # This assures that our return is either 0 or 1, regardless of what
    # $test_status was.
    test $test_status -eq 0
    return $?
}

# Low-level configtest function for external tests defined by the process.
configtest() { # process-name  process-wd  process-command
    proc_name=$1; shift
    proc_cmd=`process_command ${proc_name}`

    status=0
    if [ -x $proc_cmd ]
    then
        if [ $iam = @SIPXPBXUSER@ ]
        then
            $proc_cmd --configtest
            status=$?
        elif [ $iam = root ]
        then
            su @SIPXPBXUSER@ -c \
              "test \"is_file_executable_by_username $proc_cmd @SIPXPBXUSER@\" && $proc_cmd --configtest"
            echo $? > @SIPX_RUNDIR@/$proc_name.result
            status=`cat @SIPX_RUNDIR@/$proc_name.result`
            rm -f @SIPX_RUNDIR@/$proc_name.result
        else
            echo "You must be able to run as @SIPXPBXUSER@" 1>&2
            exit 1
        fi
    else
        echo "Installation error? '$proc_cmd' not found" 1>&2
        status=1
    fi

    test $status -eq 0 && echo "    OK"
    # This assures that our return is either 0 or 1, regardless of what
    # $status was.
    return $?
}

start_check() {
    echo -n "Checking $1:"
    cat /dev/null >  ${steperrfile}
}

finish_check() {
    local check_status
    check_status=$1
    local test_name=$2

    STATUS=$(($STATUS+$check_status))

    if [ $check_status -eq 0 ]
    then
        echo_success
    else
        echo_failure
        echo "Check ${test_name}"    >> ${errfile}
        sed 's/^/  /' ${steperrfile} >> ${errfile}
        echo ""                      >> ${errfile}
    fi
    cat /dev/null > ${steperrfile}
    echo ""
}

global_ssl_check () {
    local ssl_status

    if ! [ -e @SIPX_CONFDIR@/ssl/ssl.key -a -e @SIPX_CONFDIR@/ssl/ssl.crt ]
    then
        cat <<EOF
    SSL key and/or certificate not found (@SIPX_CONFDIR@/ssl/ssl.{key,crt})

    Run setup wizard or see the instructions in
        @SIPX_DOCDIR@/INSTALL.ssl.txt
          - OR -
        @SIPX_DOCDIR@INSTALL.ssl.html
EOF
        ssl_status=1
    else
        ## rehash certificate authorities certificates - if this fails, it will be caught below
        @bindir@/ssl-cert/ca_rehash > /dev/null 2>&1

        ## check certificate
        @bindir@/ssl-cert/check-cert.sh \
            --name ${SIPXCHANGE_DOMAIN_NAME} --name ${MY_FULL_HOSTNAME} \
            --fail 5 @SIPX_CONFDIR@/ssl/ssl.crt
        ssl_status=$?
    fi
    return $ssl_status
}

global_selinux_check () {
    local selinux_status
    selinux_status=0
    if [ "@SELINUX_GETENFORCE@" != "NOT_SUPPORTED" ]
    then
        SELinuxStatus=`@SELINUX_GETENFORCE@ 2> /dev/null`
        case $SELinuxStatus in
            Permissive|Disabled)
                ;;
            *)
                cat <<EOF
   selinux status is '${SELinuxStatus}'
      It must be 'Permissive' or 'Disabled' for sipxpbx;
      this may cause apache to fail.
      Edit /etc/selinux/config and restart your system.
EOF
                selinux_status=1
                ;;
        esac
    fi
    return $selinux_status
}

global_rpmnew_check() {
    rpmstatus=0 # pass

    RpmNews=""
    for Rpm in `find @SIPX_CONFDIR@ -name \*.rpmnew -print 2>/dev/null`
    do
        Name=`expr match "$Rpm" "@SIPX_CONFDIR@/\([a-z]*\)\."`
        case $Name in
            mappingrules|fallbackrules|authrules|forwardingrules|nattraversalrules)
                # these are routinely modified by the configurator,
                # so it is responsible for any upgrades
                rm -f ${Rpm}
                ;;
            *)
                RpmNews="$RpmNews $Rpm"
        esac
    done
    if [ -n "$RpmNews" ]; then
        cat <<EOF
    The rpm installation has provided new versions of some of the
    configuration files.  Because you had modified your files, they
    were not overwritten.

    You should compare each of the following files with your version
    (the same name, with the '.rpmnew' removed).  To reconcile the
    differences, check for new settings in the .rpmnew file and copy them
    to your file.  When you have finished, remove the .rpmnew file to
    suppress this warning.

EOF
        for Rpm in $RpmNews; do
            echo "    $Rpm"
        done
        rpmstatus=1 # fail
    fi

    # Check for .NEW files, which are only created by the build system, not
    # RPM installs.
    RpmNews="$( find @SIPX_CONFDIR@ -name \*.NEW -print 2>/dev/null )"
    if [ -n "$RpmNews" ]; then
        cat <<EOF
    The build has provided new versions of some of the configuration files.

    You should compare each of the following files with your version
    (the same name, with the '.NEW' removed).  When you have finished,
    remove the .NEW file to suppress this warning.

EOF
        for Rpm in $RpmNews; do
            echo "    $Rpm"
        done
        rpmstatus=1 # fail
    fi

    return $rpmstatus
}

global_localhost_configured_check () {
    local localhostStatus
    localhostStatus=0
    badAddrs=`mktemp -t sipxpbx.badaddrs.XXXXXX`
    trap "rm $badAddrs 2>/dev/null" EXIT
    goodAddrs=`mktemp -t sipxpbx.goodaddrs.XXXXXX`
    trap "rm $goodAddrs 2>/dev/null" EXIT
    sed 's/#.*//' /etc/hosts \
    | awk '/localhost/ { print $1}' \
    | while read localhost_localaddr
    do
        if test "${localhost_localaddr}" = "127.0.0.1"
        then
            # expect the ipv4 address
            echo "${localhost_localaddr}"  >> ${goodAddrs}
        elif test "${localhost_localaddr}" = "::1"
        then
            # ignore the ipv6 address
            :
        else
            echo "      ${localhost_localaddr}"  >> ${badAddrs}
        fi
    done
    if [ -s ${badAddrs} ]
    then
        cat <<EOF
The name 'localhost' must map to only the IPv4 address 127.0.0.1
   Any other IPv4 address for that name may cause routing or authentication errors.

   Remove the following addresses from /etc/hosts:

EOF
        cat ${badAddrs}
        localhostStatus=1
    fi
    goodAddr=`cat $goodAddrs`
    if test "${goodAddr}" != "127.0.0.1"
    then
        cat <<EOF
The name 'localhost' must map to the IPv4 address 127.0.0.1
   Add the following line to /etc/hosts:

127.0.0.1		localhost.localdomain localhost

EOF
        localhostStatus=1
    fi
    rm -f ${badAddrs} ${goodAddrs}
    return ${localhostStatus}
}

global_localhost_shared_check () {
    local localhostStatus
    localhostStatus=0

    badNames=`mktemp -t sipxpbx.badnames.XXXXXX`
    trap "rm $badNames 2>/dev/null" EXIT
    cat /dev/null > ${badNames}
    sed 's/#.*//' /etc/hosts \
    | awk '$1 == "127.0.0.1" {for (n = 2; n <= NF; n++) print $n;}' \
    | while read name ; \
    do
        case ${name} in
            localhost)
                ;;
            localhost.localdomain)
                ;;
            *)
                echo "      ${name}" >> ${badNames}
                ;;
        esac
    done
    if [ -s ${badNames} ]
    then
        cat <<EOF
The 127.0.0.1 address should map to only the names
   'localhost.localdomain' and 'localhost'.

   Any other name for that address may cause routing or authentication errors.

   Remove the following names from the 127.0.0.1 line in /etc/hosts:

EOF
        cat ${badNames}
        localhostStatus=1
    fi
    rm -f ${badNames}
    return $localhostStatus
}

global_tmp_check () {
    local tmp_status
    tmp_status=0

    if [[ "`ls -ld /tmp 2>/dev/null`" =~ drwxrwxrw[xt] ]]
    then
        tmp_status=0
    else
        echo 'Incorrect permissions on /tmp:'
        ls -ld /tmp
        tmp_status=1
    fi
    return $tmp_status
}

global_apache_check () {
    @APACHE2_HTTPD@ -t -f @SIPX_CONFDIR@/httpd.conf
    return $?
}

global_hostname_check () {
    @SIPX_BINDIR@/check-fqdn
    return $?
}

global_master_check () {
    local master_status
    master_status=0
    if [ "${CONFIG_SERVER_HOST}"x = ""x ]
    then
        echo "CONFIG_SERVER_HOST is not set in @SIPX_CONFDIR@/config.defs"
        master_status=1
    elif [ "${CONFIG_SERVER_ADDR}"x = ""x ]
    then
        echo "CONFIG_SERVER_ADDR is not set in @SIPX_CONFDIR@/config.defs"
        master_status=1
    else
        local master_addr=`dns_a ${CONFIG_SERVER_HOST}`
        if [ "${master_addr}" != "${CONFIG_SERVER_ADDR}" ]
        then
            echo "Mismatched Config Server configuration data:"
            echo "   CONFIG_SERVER_HOST '${CONFIG_SERVER_HOST}' -> '${master_addr}'"
            echo "   CONFIG_SERVER_ADDR '${CONFIG_SERVER_ADDR}'"
            master_status=1
        fi
    fi
    return ${master_status}
}


global_maxfds_check () {
    local fd_max
    fd_max=16384

    # Try to bump up max fds
    ulimit -n $fd_max > /dev/null 2>&1

    return $?
}

log_results () {
    testdate=`date -u +%Y-%m-%dT%H:%M:%S`
    if [ ${STATUS} -ne 0 ]
    then
       (echo ""; echo "sipXpbx configuration problems found:"; echo""; cat ${errfile} ) \
           | logger -s -t sipXpbx -p daemon.err
       echo "${testdate} sipXpbx configuration problems found:" >> @SIPX_LOGDIR@/configtest.log
       cat ${errfile}                                           >> @SIPX_LOGDIR@/configtest.log
    else
        echo "${testdate} configtest passed"  >> @SIPX_LOGDIR@/configtest.log
    fi
    cat /dev/null > ${errfile} # clean up temporary results file
}

do_setup() {
    # don't do any of this if the sipXsupervisor is running
    running_super=`cat @SIPX_RUNDIR@/sipxsupervisor.pid 2>/dev/null`
    if [ -n "${running_super}" ] && proc_alive ${running_super}
    then
        :
    else
        # Ensure that the preflight launcher is owned by
        # root and that the UID permission bit is set.
        if test -e @bindir@/preflight
        then
            is_file_owned_by_username @bindir@/preflight "root"
            if [ $? -ne 0 ]
            then
                chown root @bindir@/preflight
            fi
            if test ! -x @bindir@/preflight -o ! -u @bindir@/preflight
            then
                chmod 4755 @bindir@/preflight
            fi
        fi

        # Ensure that sipx-sudo-restore is owned by root and
        # that the UID permission bit is set.
        if test -e @bindir@/sipx-sudo-restore
        then
            is_file_owned_by_username  @bindir@/sipx-sudo-restore "root"
            if [ $? -ne 0 ]
            then
                chown root @bindir@/sipx-sudo-restore
            fi
            if test ! -x @bindir@/sipx-sudo-restore -o ! -u @bindir@/sipx-sudo-restore
            then
                chmod 4755 @bindir@/sipx-sudo-restore
            fi
        fi

        # Ensure the sipx-restore and sipx-archive-common scripts are
        # both owned by root.
        make_root_writable_only @SIPX_BINDIR@/sipx-restore
        make_root_writable_only @SIPX_BINDIR@/sipx-archive-common

        # TEMPORARY WORKAROUND TO DETECT MASTER SYSTEM
        activateConfigServerOnMaster

        # Remove the semaphores/memory segments associated with the imdb files
        @bindir@/ipcclean.pl --remove @SIPX_TMPDIR@/imdb.*

        # Clean up IMDB and all its dependent files.
        rm -f @SIPX_TMPDIR@/imdb.*

        # Run setup scripts defined by modules
        ## The installation process cannot take care of everything
        ##   because things like the network must be initialized first.
        ## Scripts should assume they have root privs, therefore care
        ## should be taken not to start processes that might create log
        ## files w/incorrect ownership

        ## sorting alphabetically to provide a reliable order,
        ## no sophisticated dependency order is required at this time
        for f in `ls -1 @SIPX_LIBEXECDIR@/setup.d/* 2>/dev/null | sort`
        do
            $f
        done

        ## Regenerate httpd configuration files from their .in's.
        @bindir@/httpd-sipxchange-config.sh
    fi
}

## High-level configtest function
## Verify that the prerequisites for running sipXecs are OK.
do_check() {
    ## Do the 'global' checks first, then call each shell script
    ## to let it do its own checks (using the configtest wrapper function)

    ## Start with a good status, accumulate each check result into this
    STATUS=0

    ## All output is captured in a temporary file,
    ##   which is displayed at the end iff $STATUS != 0
    errfile=`mktemp -t sipxpbx.errfile.XXXXXX`
    trap "rm $errfile 2>/dev/null" EXIT
    steperrfile=`mktemp -t sipxpbx.steperrfile.XXXXXX`
    trap "rm $steperrfile 2>/dev/null" EXIT

    ## Check to see that SSL is configured.- THIS SHOULD BE FIRST
    globaltest "ssl" "MUST_PASS" "TLS/SSL configuration"

    globaltest "maxfds" "MAY_FAIL" "Per-process file descriptor limits"

    ## check for .rpmnew files in the configuration directories
    globaltest "rpmnew" "MAY_FAIL" "rpm configuration file updates"

    ## check that SELinux is not enforcing
    globaltest "selinux" "MAY_FAIL" "SELinux is not enforcing"

    ## check apache configuration files
    globaltest "apache" "MAY_FAIL" "Apache configuration"

    ## Verify that the hostname for this machine a fully qualified
    globaltest "hostname" "MAY_FAIL" "hostname is fully qualified"

    ## Verify that a localhost address is configured
    globaltest "localhost_configured" "MAY_FAIL" "localhost address configured"

    ## Check to see that hosts file does not have extra names on localhost address
    globaltest "localhost_shared" "MAY_FAIL" "localhost name is not shared"

    ## Check to see that the different ways to configure the config server agree
    globaltest "master" "MAY_FAIL" "configuration service hostname and address"

    ## Check that /tmp has the correct permissions.
    globaltest "tmp" "MAY_FAIL" "/tmp directory has correct permissions"

    # Iterate through the processes and let each shell script do its own checks
    start_check sipxsupervisor
    configtest  sipxsupervisor
    finish_check $? sipxsupervisor

    log_results

    return $STATUS
}

# High-level stop function.
# Stops the sipxsupervisor process (running as @SIPXPBXUSER@), and the
# sipXecs services
do_stop() {

   echo "Stopping sipXpbx: "

   echo -n "Stopping apache: "
   @APACHE2_HTTPD@ -k stop -f @SIPX_CONFDIR@/httpd.conf 
   echo

   stop      sipxsupervisor
   stopCheck sipxsupervisor

   # The following line is so that the GUI
   # detects a successful shutdown properly
   true
}

# TEMPORARY WORKAROUND TO DETECT MASTER SYSTEM
activateConfigServerOnMaster () {
    local thisHost=`hostname -f`
    local configServerVersion

    if [ "${CONFIG_SERVER_HOST}" = "${thisHost}" ]
    then
        configServerVersion=`@SIPX_BINDIR@/sipxconfig-config --version | sed 's/-.*//'`

        configVersionDirectory=@SIPX_VARDIR@/process-cfgver
        if [ ! -d ${configVersionDirectory} ]
        then
            mkdir -p ${configVersionDirectory}
            chown @SIPXPBXUSER@:@SIPXPBXGROUP@ ${configVersionDirectory}
            chmod u=rwx,g=rws,o=rx ${configVersionDirectory}
        fi
        echo "${configServerVersion}" > @SIPX_VARDIR@/process-cfgver/ConfigServer
        chown @SIPXPBXUSER@:@SIPXPBXGROUP@ ${configVersionDirectory}/ConfigServer
        chmod u=rw,g=rw,o=r ${configVersionDirectory}/ConfigServer
    fi
}

# High-level start function.
# Starts the sipxsupervisor process (running as @SIPXPBXUSER@), which starts
# the sipXecs services
do_start() {

        ### Start the programs.
        echo ""
        echo "Starting sipXpbx: "

        # Start up the sipxsupervisor
        # Start the sipxsupervisor with SIPX_LOGDIR as the working directory,
        # so that any core files it produces will be put there.
        cd @SIPX_LOGDIR@
        start sipxsupervisor

        sleep 1
        echo -n "Starting httpd: "
	# Note the log file names must not end in ".log", as that would cause
	# logrotate to handle them incorrectly.  Must be opened in append mode
	# for logrotate to work correctly.
        ${HTTP_DAEMON_START} -k start -f @SIPX_CONFDIR@/httpd.conf -DSSL \
	    >> @SIPX_LOGDIR@/httpd_stdout_log 2>> @SIPX_LOGDIR@/httpd_stderr_log \
            && echo_success || echo_failure
        echo
}

## display and return the status of a process (disabled returns ok [0])
status() { # process-name
   proc_name=$1
   local proc_status=0

   echo -n "Checking $proc_name: "
   if [ ! -r @SIPX_RUNDIR@/$proc_name.pid ]
   then
      echo "[Not Running] "
      proc_status=1
   else
       PID=`cat @SIPX_RUNDIR@/$proc_name.pid 2> /dev/null`
       if proc_alive "$PID"
       then
          echo_success; echo ''
       else
          echo_failure; echo ''
          proc_status=1
       fi
   fi
   return ${proc_status}
}

do_status() {
    status sipxsupervisor
    return $?
}



export PATH=$PATH:@bindir@

ExitStatus=0

# See how we were called.
case "$1" in
  start)
        ### Verify that the sipXecs services are not already running.
        if [ -e @SIPX_RUNDIR@/sipxsupervisor.pid ]
        then
            echo "   Found @SIPX_RUNDIR@/sipxsupervisor.pid..."
            echo "         checking for running sipxsupervisor process..."
            running_super=`cat @SIPX_RUNDIR@/sipxsupervisor.pid 2>/dev/null`
            if [ -n "${running_super}" ] && proc_alive ${running_super}
            then
                echo -n " The sipXecs sipxsupervisor may already be running (pid ${running_super})."
                echo -n " Try stop or restart."
                echo_failure
                echo ""
                ExitStatus=1
            else
                # stale pid file found? - do stop just in case
                echo " sipxsupervisor not found - running restart to clean locks."
                do_stop
                do_setup
                do_start
                ExitStatus=$?
            fi
        else
            do_setup
            do_start
            ExitStatus=$?
        fi
        ;;
  stop)
        do_stop
        ;;
  status)
        do_status
        ExitStatus=$?
        ;;
  configtest)
        do_setup
        do_check
        ExitStatus=$?
        ;;
  restart)
        do_stop
        do_setup
        do_start
        ExitStatus=$?
        ;;
  *)
        echo $"Usage: $0 {start|stop|status|configtest|restart}"
        exit 1
esac

exit ${ExitStatus}

#!/bin/sh
###
### Capture a sipXpbx configuration for reporting purposes
###

# Add /sbin to the end of PATH, because often if the user is not
# running as root or if he su'ed to root, /sbin will not be in the
# PATH, and ifconfig can't be found.  But put /sbin at the end of PATH
# in case the user prefers a different ifconfig that is already in the
# PATH.
PATH=$PATH:/sbin

Action=SNAPSHOT
DoWebFiles=YES
SaveSecrets=NO
CoreFiles=
ExtraFiles=
CommentFiles=
Tar=YES
ToFile=
Logs=current
LogStart=
LogStop=
IncludeCallRecords="FALSE"
IncludeProfiles="FALSE"

DefaultTarFile="sipx-configuration-`hostname -f`.tar.gz"

PROFILES_PATH="@SIPX_VARDIR@/configserver/phone/profile/tftproot"
ProfileExtensions="cfg xml csv ini"

# Define functions.

# Make a file name absolute.
# First argument is the file name, second is the default directory.
# If file name contains no /, prepend the default directory.
# If file name is relative, prepend the working directory.
# If file name is absolute, leave it unchanged.
# Output absolute file name to stdout.
function make_absolute () {
  case ${1} in
      /*)
          echo ${1}
          ;;
      */*)
          echo ${PWD}/${1}
          ;;
      *)
          echo ${2}/${1}
          ;;
  esac
}

# Process arguments.

while [ $# -ne 0 ]
do
    case ${1} in

        -v|--version)
            echo @VERSION@
            exit;
            ;;

        -w|--www)
            DoWebFiles=YES
            ;;

        -nw|--no-www)
            DoWebFiles=NO
            ;;

        -l|--logs)
            if [ -z "${2}" ]
            then
                echo "No argument supplied for ${1}" 1>&2
                Action=USAGE
                break
            else
                Logs=`echo ${2} | tr A-Z a-z`
                case ${Logs} in
                    current|none|all)
                        :
                        ;;
                    [1-9]*)
                        if ! expr ${Logs} : '[1-9][0-9]*$' >/dev/null
                        then
                            echo "invalid selector for ${1}: '${2}'" 1>&2
                            Action=USAGE
                        fi
                        ;;
                    *)
                        echo "invalid selector for ${1}: '${2}'" 1>&2
                        Action=USAGE
                        ;;
                esac
            fi
            shift
            ;;

        -nl|--no-logs)
            Logs=none
            ;;

        --log-start)
            if [ -z "${2}" ]
            then
                echo "No argument supplied for ${1}" 1>&2
                Action=USAGE
                break
            elif test "${Logs}" != "current"
            then
                echo "Log start/stop times may only be specified with '--logs current'" 1>&2
                Action=USAGE
            else
                LogStart=${2}
                Logs=cut
            fi
            shift
            ;;

        --log-stop)
            if [ -z "${2}" ]
            then
                echo "No argument supplied for ${1}" 1>&2
                Action=USAGE
                break
            elif test "${Logs}" != "cut"
            then
                echo "A --log-start time must be specified to use '${2}'" 1>&2
                Action=USAGE
            else
                LogStop=${2}
            fi
            shift
            ;;

        -c|--credentials|--include-secrets)
            SaveSecrets=YES
            ;;

        -i|--info-only)
            Action=INFO
            Tar=NO
            ;;

        -n|--notar)
            Tar=NO
            ;;

        --core)
            if [ -z "${2}" ]
            then
                echo "No argument supplied for --core" 1>&2
                Action=USAGE
                break
            fi
            CoreFiles="${CoreFiles} ${2}"
            shift
            ;;

        --profiles)
            IncludeProfiles="TRUE"
            ;;

        --cdr)
            IncludeCallRecords="TRUE"
            ;;

        --file)
            if [ -z "${2}" ]
            then
                echo "No argument supplied for --file" 1>&2
                Action=USAGE
                break
            fi
            ExtraFiles="${ExtraFiles} ${2}"
            shift
                 ;;

        --comment)
            if [ -z "${2}" ]
            then
                echo "No argument supplied for --comment" 1>&2
                Action=USAGE
                break
            fi
            CommentFiles="${CommentFiles} ${2}"
            shift
            ;;

        ##
        ## handle the 'end of options' marker
        ##
        --)
            ;;

        ##
        ## handle an unknown switch
        ##
        -*)
            echo "Unknown switch: ${1}" 1>&2
            Action=USAGE
            break
            ;;

        *)
            if [ -z "${ToFile}" ]
            then
                ToFile=${1}
            else
                echo "Too many arguments supplied: $@" 1>&2
                Action=USAGE
                break
            fi
            ;;
    esac

    shift # always consume 1 argument
done

# Establish the work directory, which will mirror the parts of the
# file system that we are interested in, with $Work corresponding to /.
# Since the destination location may not be able to hold the uncompressed
# data, place it in a recognized temporary location.
Work=`mktemp -d -t sipx-snapshot.XXXXXX`
trap "rm -rf $Work* 2>/dev/null" 0

if [ ${Tar} = YES ]
then
  # Set default ToFile if necessary.
  ToFile=${ToFile:-${DefaultTarFile}}
else
  # If Tar = NO, we copy the files directly to their destination.
  Work=${ToFile:-${Work}}
fi

if [ ${Action} = USAGE ]
then
  cat <<USAGE

Usage:

    sipx-snapshot [ --include-secrets | -c  | --credentials ]
                  [ -nw | --no-www ]
                  [ --profiles ]
                  [ --cdr ]
                  [ -l  | --logs {current|all|nnn|none} ]
                  [ --log-start <date-time> [ --log-stop <date-time> ]]
                  [ --core <core-file> ] ...
                  [ --file <file-name> ] ...
                  [ --comment <file-name> ] ...
                                       [ <tar-file-name> ]

    sipx-snapshot [ -i  | --info-only ]

    sipx-snapshot -n  | --notar
                  { options as in the first form }
                                       [ <to-directory-name> ]

    Collects important sipXpbx configuration information
    and saves it in a file.  This is used to record configuration
    information to accompany a problem report.

    In the default mode (the first form shown), the output file is a
    gzipped tar file named <tar-file-name>.  The default name is
    '${DefaultTarFile}'.  The tar file contains a text file named
    SystemConfig that describes various system configuration information,
    and the sipXpbx configuration files.

    The second form, with the --info-only switch, only the system
    configuration information is collected; none of the sipXpbx configuration
    files are included, and the output is to standard output.

    The third form, with the --notar switch, prevents the saved files from
    being tar'ed -- they remain in a file tree that mirrors the originals;
    in this case the final argument is the name of the directory where the
    information should be saved.

    By default, all passwords and other secrets are removed from the recorded
    configuration files.  If diagnosing a particular problem requires that the
    real secret information be included, the --include-secrets switch
    causes it to be left in. 

    The --no-www switch disables saving the apache configuration files.

    The --logs switch selects which logs are saved:
               current - saves all the current logs (not those saved by logrotate)
               all     - saves all logs in the sipx log directory (large!)
               nnn     - saves all logs from the specified set of past logs
               none    - does not include any logs (not recommended)

    The --log-start and --log-stop switches allow you to limit the log file
    size that is included in the snapshot to the times between the start and
    stop times.  Times MUST be specified in UCT (aka GMT) as used in the log 
    files.  Only times in the 'current' log may be specified (not in archived
    logs).  If the --log-stop switch is not specified, the extract is from the
    start time to the end of the log file. 

      --log-start '2004-12-08 17:45:30' --log-stop '2004-12-08 18:12:52'

    The --no-logs switch causes the sipX and Apache logs to be omitted
    from the snapshot; the default is to include them.  (deprecated but
    left in for backward compatibility - use '--logs none').

    The --profiles switch includes generated Phone and Gateway profile files,
    based on those that match a predefined filter.  Any passwords or other 
    confidential information in these files will be included in the snapshot. 

    The --cdr switch includes the data from call detail records; this is
    useful for debugging problems with the CDR system itself.

    The --core switch is used to specify the name of a core file to
    include among the files archived.  If the file name does not contain
    a /, it is searched for in @SIPX_LOGDIR@, otherwise it is searched for
    as usual.  The program 'file' is used to determine the corresponding
    executable file, the dynamic loader is used to determine the
    required dynamic libraries, and the executable and libraries are
    included among the files to be archived.  --core may be used
    multiple times.

    The --file switch is used to specify the name of a file to include
    among the files archived.  --file may be used multiple times.
    The argument to --file can be a wildcard, if it is quoted.

    The --comment switch is used to specify the name of a file to include
    among the files archived, but it will be at the top level of the saved
    file structure, rather than placed according to its full file name.
    --comment may be used multiple times.
    The argument to --comment can be a wildcard, if it is quoted.

    The --delete-logs option has been removed.

USAGE
    exit
fi


# File into which to record random system configuration information.
SystemConfig=${Work}/SystemConfig

# Files into which the postgres databases are dumped
ConfigDb=${Work}/SIPXCONFIG
CallStateDb=${Work}/SIPXCSE
CallDetailDb=${Work}/SIPXCDR

function hasTimestamps () {
   # looks for a timestamp like "2008-01-17T09:02:09.451460Z": on the first line
   local log=$1
   local sawTime
   sawTime=`head -n 1 "${log}" \
            | perl -ne 'm/^"\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d.\d{6}Z":/ && print "YES"'`
   test "${sawTime}" = "YES"
}

# Assemble the list of files to record.

# These files and directories are always recorded.
# (In @wwwdir@/doc, we only want to record VXML files, and not the directories
# of prompts.)
cat > $Work.copy-files <<EOF
@SIPX_CONFDIR@
@SIPX_DBDIR@
` ls -1d @wwwdir@/doc/*vxml 2>/dev/null `
/etc/host.conf
/etc/resolv.conf
/etc/named.conf
/etc/ntp.conf
/etc/ntp
/etc/hosts
/etc/crontab
/etc/sendmail.cf
@SIPX_RUNDIR@
@SIPX_VARDIR@/process-state
@SIPX_VARDIR@/process-cfgver
@SIPX_DATADIR@/process.d
/var/log/yum.log
/etc/yum.conf
/etc/yum
/etc/yum.repos.d
EOF

# Add the requested log files
case ${Logs} in
    none)
        :
        ;;
    cut)
        cutDir=`mktemp -d @SIPX_LOGDIR@/cut.XXXXXX`
        trap "rm -rf ${cutDir} 2>/dev/null" 0
        echo "Attempting to cut logs from '${LogStart}' to '${LogStop}'" > ${cutDir}/extract.log
        echo ${cutDir}/extract.log >> $Work.copy-files
        for log in @SIPX_LOGDIR@/*log
        do
          if hasTimestamps "${log}"
          then
              echo "cutting '${log}'" >> ${cutDir}/extract.log
              echo ${cutDir}/`basename ${log}` >> $Work.copy-files
              if test -z "${LogStop}"
              then
                  @SIPX_BINDIR@/sipx-log-cut -i "${log}" -s "${LogStart}" -t \
                      > ${cutDir}/`basename ${log}` \
                      2>> ${cutDir}/extract.log
              else
                  @SIPX_BINDIR@/sipx-log-cut -i "${log}" -s "${LogStart}" -e "${LogStop}" -t \
                      > ${cutDir}/`basename ${log}` \
                      2>> ${cutDir}/extract.log
              fi
          else
              echo "No timestamps found in '${log}'; including full log" \
                  >> ${cutDir}/extract.log
              echo $log >> $Work.copy-files
          fi    
        done
        ;;
    current)
        for log in @SIPX_LOGDIR@/*log
        do
          echo $log >> $Work.copy-files
        done
        ;;
    [1-9]*)
        if ! ls -1 @SIPX_LOGDIR@/*log.${Logs}{,.gz} 2>/dev/null |
             grep '.' >> $Work.copy-files
        then
            echo "Can't find any log files for past day ${Logs}:" >&2
            echo "    @SIPX_LOGDIR@/*log.${Logs}{,.gz}: No such file or directory" >&2
        fi
        ;;
    all)
        for log in @SIPX_LOGDIR@/*log  @SIPX_LOGDIR@/*log.*
        do
          echo $log >> $Work.copy-files
        done
        ;;
esac

# Add the --file files to the list.
for File in ${ExtraFiles}
do
  # Point the file name to $PWD if it has no /.
  File=$( make_absolute ${File} ${PWD} )

  # Check that the file exists.
  if [ ! -e ${File} ]
  then
      echo File ${File} does not exist. 1>&2
      exit 1
  fi

  # Add the file name to the list.
  echo "${File}" >> $Work.copy-files
done

# Copy the --comment files to $Work.
for File in ${CommentFiles}
do
  # Point the file name to $PWD if it has no /.
  File=$( make_absolute ${File} ${PWD} )

  # Check that the file exists.
  if [ ! -e ${File} ]
  then
      echo File ${File} does not exist. 1>&2
      exit 1
  fi

  # Copy the file into the work directory.
  cp -pR --dereference ${File} ${Work}/$( basename ${File} )
done

# Record miscellaneous information about the host.

cat /dev/null            > ${SystemConfig}
echo -n "Snapshot:  "   >> ${SystemConfig}
echo "$0 @SIPX_VERSION@">> ${SystemConfig}
echo ""                 >> ${SystemConfig}
echo -n "Host:      "   >> ${SystemConfig}
hostname --fqdn         >> ${SystemConfig}
echo ""                 >> ${SystemConfig}
echo -n "Date:      "   >> ${SystemConfig}
date -u                 >> ${SystemConfig}
echo ""                 >> ${SystemConfig}
echo -n "SysVersion: "  >> ${SystemConfig}
uname -a                >> ${SystemConfig}
if [ -f /etc/issue ]
then
echo ""                 >> ${SystemConfig}
echo "Release (/etc/issue):" >> ${SystemConfig}
cat /etc/issue          >> ${SystemConfig}
fi
if [ -f /etc/redhat-release ]
then
echo ""                 >> ${SystemConfig}
echo "Release (/etc/redhat-release):" >> ${SystemConfig}
cat /etc/redhat-release >> ${SystemConfig}
fi
echo ""                 >> ${SystemConfig}
echo    "sipXpbx User:" >> ${SystemConfig}
grep @SIPXPBXUSER@ /etc/passwd >> ${SystemConfig}
echo ""                 >> ${SystemConfig}
echo "SELinux:"                 >> ${SystemConfig}
if selinuxenabled               >> ${SystemConfig} 2>&1
then
    echo -n "   Enabled; mode=" >> ${SystemConfig}
    getenforce                  >> ${SystemConfig}
else
    echo    "   Disabled"       >> ${SystemConfig}
fi 
echo ""                         >> ${SystemConfig}

echo "NTP Peers:"               >> ${SystemConfig}
/usr/sbin/ntpq -p               >> ${SystemConfig} 2>&1
echo ""                         >> ${SystemConfig}

echo "SSL Configuration:"      >> ${SystemConfig}
ls -lR @SIPX_CONFDIR@/ssl/     >> ${SystemConfig}
echo "  Certificate Dump:"     >> ${SystemConfig}
cat @SIPX_CONFDIR@/ssl/ssl.crt >> ${SystemConfig} 2>&1
echo ""

# Process the core file specifications (if any) into the list of files to save
# and include details in SystemConfig.

# If core files were specified, determine the files to be copied.
cat /dev/null >${Work}.core-related-files
for Core in ${CoreFiles}
do
  # Point the core file name to SIPX_LOGDIR if it has no /.
  Core=$( make_absolute ${Core} @SIPX_LOGDIR@ )

  # Check that the file exists.
  if [ ! -e ${Core} ]
  then
      echo File ${Core} does not exist. 1>&2
      exit 1
  fi

  # Run 'file' on it.
  file_output="$( file ${Core} )"

  # Verify that it is a core file.
  if [[ "${file_output}" != *" core file "* ]]
  then
      echo File ${Core} is not a core file. 1>&2
      echo "'file ${Core}' reports: $f" 1>&2
      exit 1
  fi

  Executable="${file_output##*\ from\ \'}"
  Executable="${Executable%\'}"

  # Point the executable file name to SIPX_BINDIR if it has no /.
  Executable=$( make_absolute ${Executable} @SIPX_BINDIR@ )

  # Check that the file exists.
  if [ ! -e ${Executable} ]
  then
      echo File ${Executable}, the executable for ${Core}, does not exist. 1>&2
      exit 1
  fi

  echo ""                               >> ${SystemConfig}
  echo "Core file: ${Core}"             >> ${SystemConfig}
  echo "${file_output}"                 >> ${SystemConfig}
  echo "from executable: ${Executable}" >> ${SystemConfig}

  # Accumulate the list of files to be added to the snapshot in 
  echo "${Core}" >>${Work}.core-related-files
  echo "${Executable}" >>${Work}.core-related-files
  # Get the dynamic libraries this executable needs.
  /lib/ld-linux.so* --list ${Executable} |
      sed -e '/ => [^ ]/!d' -e 's/^.* => \([^ ]*\) .*$/\1/' >>${Work}.core-related-files

done

# Remove duplicates from the list, and add it to $Work.copy-files
sort -u ${Work}.core-related-files >>$Work.copy-files

# Get DNS and hostname information
locale=""
full_host=`hostname --fqdn | tr A-Z a-z`
full_locale=$full_locale

while [ -n "$full_locale" ]
do
    locale="$full_locale $locale"
    full_locale=`echo $full_locale | sed 's/^[^.]*\.//; s/^[^.]*$//'`
done

sipDomain=`. @SIPX_CONFDIR@/config.defs > /dev/null 2>&1; echo ${SIPXCHANGE_DOMAIN_NAME}`
echo "" >> ${SystemConfig}
echo ======== DNS LOOKUPS >> ${SystemConfig}

echo "" >> ${SystemConfig}
echo ======== DNS NAPTR $sipDomain >> ${SystemConfig}
dig -t naptr +noidentify +nocmd +nocomments +noquestion +nostats +noauthority $sipDomain \
>> ${SystemConfig}

for d in $sipDomain rr.$full_host
do
  echo "" >> ${SystemConfig}
  echo ======== DNS SRV $d >> ${SystemConfig}
  dig -t srv +noidentify +nocmd +nocomments +noquestion +nostats +noauthority _sip._tcp.$d _sip._udp.$d \
  | sort -u -r \
  >> ${SystemConfig}
done

echo "" >> ${SystemConfig}
echo ======== DNS A $sipDomain >> ${SystemConfig}
dig -t a +noidentify +nocmd +nocomments +noquestion +nostats +noauthority $sipDomain \
>> ${SystemConfig}

# Get configuration information on sipX components
for component in pbx config proxy registry publisher vxml commserverlib calllib medialib tacklib portlib
do
  echo "" >> ${SystemConfig}
  if test -x @bindir@/sipx${component}-config
  then
      @bindir@/sipx${component}-config --all >> ${SystemConfig}
  else
      echo Missing: @SIPX_BINDIR@/sipx${component}-config >>   ${SystemConfig}
  fi
done

# Get version info for key prerequisite packages
for prereq in pcre cgicc glib
do
  echo "" >> ${SystemConfig}
  prereq_version=`${prereq}-config --version 2> /dev/null`
  if test $? -eq 0
  then
      echo -n "$prereq --version : ${prereq_version}" >> ${SystemConfig}
  else
      echo -n "$prereq --version : (not available)" >> ${SystemConfig}
  fi
done

# Get info on installed sipx rpms
for sipName in `rpm -qa --nodigest --nosignature | grep sipx`
do
   echo "" >> ${SystemConfig}
   echo "======== RPM $d" >> ${SystemConfig}
   rpm -qi $sipName     >> ${SystemConfig}
done

echo "======== RPMs" >> ${SystemConfig}
rpm -qa --nodigest --nosignature | sort >> ${SystemConfig}

echo ""       >> ${SystemConfig}
echo "======== INTERFACES (ifconfig -a)" >> ${SystemConfig}
ifconfig -a   >> ${SystemConfig}

echo ""       >> ${SystemConfig}
echo "======== ROUTES (route -n)" >> ${SystemConfig}
route -n   >> ${SystemConfig}

# Get any firewall or other tricky IP manipulations
echo "" >> ${SystemConfig}
echo "======== IPTables:"       >> ${SystemConfig}
for t in nat filter mangle
do
  echo "=== $t table:"            >> ${SystemConfig}
  iptables --table $t --list --verbose --numeric --line-numbers >> ${SystemConfig} 2>&1
done

# Execute system monitoring commands
for command in \
    "ps -efww" \
    "netstat -ap --ip --numeric-hosts" \
    "top n 1 b" \
    "vmstat 5 2" \
    "free" \
    "df" \
    "ls -ld /tmp" \
    "@SIPX_BINDIR@/analyze_483s @SIPX_LOGDIR@/sipXproxy.log"
do
  echo "" >> ${SystemConfig}
  echo ======== $command >> ${SystemConfig}
  $command >> ${SystemConfig} 2>&1
done

# Collect sipX configuration information
echo "" >> ${SystemConfig}

if [ "${Action}" = "SNAPSHOT" ]
then
  # Record the sipXconfig database contents
  pg_dump -d SIPXCONFIG -U @POSTGRESQL_USER@ --attribute-inserts > ${ConfigDb}

  if [ "${IncludeCallRecords}" = "TRUE" ]
  then
      # Record the call state event and detail record database contents
      pg_dump -d SIPXCDR -U @POSTGRESQL_USER@ --attribute-inserts > ${CallDetailDb} 2> /dev/null
  fi

  # Include the Phone and Gateway profile files, if specified.
  if [ "${IncludeProfiles}" = "TRUE" ]
  then
    # First gather all files that match simply a MAC address with no extension, and add
    # back the path.  (The main LG-Nortel 68xx Profile file has this format.)
    ProfileFiles=""
    for macfile in `ls ${PROFILES_PATH} | grep -E "^[0-9a-fA-F]{12}$" 2> /dev/null`
    do
        echo "${PROFILES_PATH}/${macfile}" >> $Work.copy-files
    done

    # Loop through all the profile file extensions to be picked up.  
    for Extension in ${ProfileExtensions}
    do
        for configfile in `ls ${PROFILES_PATH}/*.${Extension} 2> /dev/null`
        do
            echo "${configfile}" >> $Work.copy-files
        done
    done
  fi
 
  # Copy all the files and directories that should be copied.
  for file in `sort -u $Work.copy-files`
  do
    copyFile=`basename ${file}`
    copyDir=${Work}`dirname ${file}`
    test -d ${copyDir} || mkdir -p ${copyDir}
    if [ -f ${file} ]
    then
      # This is 'cp --archive', except with '--dereference'.
      # '--dereference' is necessary, because if we're saving dynamic libraries
      # for a core file, the linked dynamic library names are almost always
      # symlinks.
      cp -pR --dereference ${file} ${copyDir}/${copyFile}
    elif [ -d ${file} ]
    then
      cp -pR --dereference ${file} ${Work}${file}
    else
      echo Missing or not a file/directory: ${file} >> ${SystemConfig}
      ls -ld ${file} >> ${SystemConfig} 2> /dev/null
    fi
  done

  # Remove the secret values from configuration unless told not to.
  if [ ${SaveSecrets} = NO ]
  then
    for file in `find $Work -name credential.xml`
    do
      perl -pi \
            -e 's|<passtoken>[^<]*</passtoken>|<passtoken>ELIDED</passtoken>|;' \
            -e 's|<pintoken>[^<]*</pintoken>|<pintoken>ELIDED</pintoken>|' \
           ${file}
    done
    for file in `find $Work -name domain-config`
    do
      perl -pi \
            -e 's|SHARED_SECRET +: +.*|SHARED_SECRET : ELIDED|' \
           ${file}
    done
    for file in `find $Work -name sipxbridge.xml`
    do
      perl -pi \
            -e 's|<user-name>[^<]*</user-name>|<user-name>ELIDED</user-name>|;' \
            -e 's|<password>[^<]*</password>|<password>ELIDED</password>|' \
           ${file}
    done
    perl -pi @SIPX_LIBEXECDIR@/sipx-strip-db-secrets.pl ${ConfigDb}
  fi

  # If we cut out a timeslice of the logs, 
  #   relocate them as though they were full logs in the working copy to be tarred
  #   delete the cut copy under the original log directory
  if [ "${Logs}" = "cut" ]
  then
      mv ${Work}${cutDir}/* ${Work}@SIPX_LOGDIR@
      rmdir ${Work}${cutDir}
      rm -rf ${cutDir}
  fi
fi

if [ ${Tar} = YES ]
then
  # Tar the entire directory tree and compress it.
  # (Writing this pipe explicitly allows us to use tar's that do not understand
  # the -z option.)
  tar cf - -C ${Work} . | gzip >${ToFile}
  # Remove the temporary files.
  rm -rf $Work

  echo "Configuration saved in '${ToFile}'"

elif [ "${Action}" = "INFO" ]
then
  cat ${SystemConfig}
  echo "(Configuration information is in '${SystemConfig}')"

else
  echo "Configuration saved in '${Work}'"
fi

# Remove the temporary files.
rm -rf $Work.copy-files $Work.delete-files $Work.core-related-files

# Common to both the sipx-backup and sipx-restore scripts.

CONFIG_DATABASE_NAME=SIPXCONFIG
DB_TAR=db.tar
SIPX_CERTDB_DIR=@SIPX_VARDIR@/certdb

operation_stamp() {
   echo $OPERATION" script invoked at "`date`", INTERACTIVE="$INTERACTIVE"."
}

confirm_action() {
  if [ "$INTERACTIVE" = "yes" ]; then
    while :
    do
      echo -n "Is this OK? [y/N] "
      read response
      case $response in
        y* | Y*)
          break
          ;;

        n* | N* | "")
          echo "Cancelled."
          exit
          ;;
      esac
    done
  fi
}

bad_usage() {
  usage
  exit 1
}

postgresql_running() {
  PID_FILES="/var/run/postmaster*.pid /var/lib/postgresql/data/postmaster*.pid"
  PID_FILES="$PID_FILES /var/lib/pgsql/data/postmaster*.pid"
  PID_FILES="$PID_FILES ~@POSTGRESQL_USER@/data/postmaster*.pid"
  
  # check for the existance of a postgresql pid file
  for PF in $PID_FILES; do
    if [ -e "$PF" ] ; then
      PID_FILE="$PF"
      break
    fi
  done

  if [ ! -r "$PID_FILE" ] ; then
    # if we can read the pid file, then determine if there's a pid in the
    # process table that matches
    PID="$(cat $PID_FILE | head -1)"
    PIDS="$(ps -C postmaster -o pid --noheaders 2>/dev/null | grep -q $PID >/dev/null 2>&1)"
  else
    # if we can't read the pid file, then simply see if there's a postmaster 
    # running
    PIDS="$(ps -C postmaster -o pid --noheaders 2>/dev/null)"
  fi

  if [ -z "$PIDS" ] ; then
    echo "PostgreSQL does not appear to be running."
	echo "  You must start it in order to $OPERATION."
    exit 2
  fi
}

delete_old_file() {
  if [ -a $1 ]
  then
    echo "Will delete the old $1 file..."
    confirm_action
    rm -rf $1
  fi
}


# Makefile for doing various tasks to configure sipX.

# This file is supplied as Makefile.config.in, which has to be substituted
# substituted to create Makefile.config, which can be used to automate
# several common tasks while configuring sipX.  Makefile.config is
# generated by ./configure in the sipXpbx project.

# All of these command groups are intended to be run with the working
# directory being the parent of all the sipX* directories.

# The directory containing the test SSL certificate files to be copied
# into .../etc/sipxpbx/ssl.
TEST_SSL_FILES=~/local/ssl-test

# Set the "prefix" variable, since many of the @-substitutions use it.
prefix=@prefix@
# And also "exec_prefix":
exec_prefix=${prefix}

# All of the following command groups that edit or modify the
# configuration files are idempotent, that is, if you repeat them, the
# second and later executions have no additional effect.

# But remember to set the SIP domain before running install-test-config.

.PHONY: no-config-server no-media-server \
	install-test-certificate install-host-name install-test-config \
	install-fix-apache-modules \
	check-libraries log-debug

# There is no default action.
default:
	false

# Install test certificate files so Apache can do SSL.
# Do this by symlinking the sipX SSL directory to the local SSL
# certificate directory.  Thus, the sandbox can be shared between machines.
install-test-certificate:
	install -d @SIPX_CONFDIR@
	if [ -h @SIPX_CONFDIR@/ssl ] ; \
	then \
	    rm @SIPX_CONFDIR@/ssl ; \
	elif [ -e @SIPX_CONFDIR@/ssl ] ; \
	then \
	    if [ -d @SIPX_CONFDIR@/ssl ] ; \
	    then \
	        rmdir @SIPX_CONFDIR@/ssl ; \
	    else \
	        echo 'Cannot write over @SIPX_CONFDIR@/ssl' >&2 ; \
	        false ; \
            fi ; \
	fi
	ln -s $(TEST_SSL_FILES) @SIPX_CONFDIR@/ssl

# Edit config.defs to set:
#     SIPXCHANGE_DOMAIN_NAME=`hostname -f`
#     SIPXCHANGE_REALM=`hostname -f`
CONFIG_DEFS=@SIPX_CONFDIR@/config.defs
install-host-name:
	mv $(CONFIG_DEFS) $(CONFIG_DEFS).tmp
	sed <$(CONFIG_DEFS).tmp >$(CONFIG_DEFS) \
	    -e '/^ *SIPXCHANGE_DOMAIN_NAME *=/s/=.*$$/=`hostname -f`/' \
	    -e '/^ *SIPXCHANGE_REALM *=/s/=.*$$/=`hostname -f`/'
	rm $(CONFIG_DEFS).tmp

# Install test configuration information from the test-config directory.
# Make sure you have the SIP domain set before executing these commands,
# as it uses the SIP domain to generate the credentials.
# Copy all of the XML files from
# sipXpbx/doc/developer/test-config/var=sipxdata=sipdb to @SIPX_DBDIR@.
# Substitute sipX's SIP domain name (taken from the SIPXCHANGE_DOMAIN_NAME
# line of @SIPX_CONFDIR@/config.defs) for "[domain]".
# Also, pass credential.xml through sipXcommserverLib/doc/update-passtokens
# in order to generate the passtokens for the users.  That will prompt for
# passwords for all the voicemail accounts.
install-test-config:
	install -d @SIPX_DBDIR@
	H=$$( sed <$(CONFIG_DEFS) -e '/^ *SIPXCHANGE_DOMAIN_NAME *=/!d' -e 's/^.*=//' ) ; \
	I=$$( eval echo $$H ) ; \
	echo SIP domain: $$I ; \
	J=$$( sed <$(CONFIG_DEFS) -e '/^ *SIPXCHANGE_REALM *=/!d' -e 's/^.*=//' ) ; \
	K=$$( eval echo $$J ) ; \
	echo SIP registration realm: $$K ; \
	for file in alias.xml permission.xml ; \
	do \
	sed -e "s/\[domain]/$$I/" -e "s/\[realm]/$$K/" <sipXpbx/doc/developer/test-config/var=sipxdata=sipdb/$$file >$$file.tmp ; \
	install $$file.tmp @SIPX_DBDIR@/$$file ; \
	done ; \
	for file in credential.xml ; \
	do \
	sed -e "s/\[domain]/$$I/" -e "s/\[realm]/$$K/" <sipXpbx/doc/developer/test-config/var=sipxdata=sipdb/$$file >$$file.tmp ; \
	perl sipXcommserverLib/doc/update-passtokens $$file.tmp $$file.2.tmp ; \
	install $$file.2.tmp @SIPX_DBDIR@/$$file ; \
	done
	for file in orbits.xml ; \
	do \
	sed -e "s#\[prefix]#${prefix}#" <sipXpbx/doc/developer/test-config/etc=sipxpbx/$$file >$$file.tmp ; \
	install $$file.tmp @SIPX_CONFDIR@/$$file ; \
	done
	grep -q '^replicationTrigger.replicateOnStartup=false' \
		@SIPX_CONFDIR@/sipxconfig.properties.in || \
	echo 'replicationTrigger.replicateOnStartup=false' \
		>>@SIPX_CONFDIR@/sipxconfig.properties.in

# Remove from httpd.conf any LoadModule directives for modules that
# Apache (@APACHE2_HTTPD@) has built in.
HTTPD_CONF=@SIPX_CONFDIR@/httpd.conf
install-fix-apache-modules:
	@APACHE2_HTTPD@ -l | \
	sed \
	    -e '/^  /!d' \
	    -e 's/^  //' \
	    -e 's/\.c$$//' \
	    -e 's%\(.*\)%^ *LoadModule .*/\1\.so *$$%' >$(HTTPD_CONF).pat.tmp
	mv $(HTTPD_CONF) $(HTTPD_CONF).tmp
	@echo "Removing:"
	@grep <$(HTTPD_CONF).tmp -f $(HTTPD_CONF).pat.tmp || true
	grep <$(HTTPD_CONF).tmp >$(HTTPD_CONF) -f $(HTTPD_CONF).pat.tmp -v || true
	chmod --reference $(HTTPD_CONF).tmp $(HTTPD_CONF)
	rm $(HTTPD_CONF).tmp $(HTTPD_CONF).pat.tmp

# Do not run sipXvxml with setuid.
# This allows it to produce core dumps but prevents it from using
# real-time scheduling.
# sipXvxml is copied rather than just chmod'ed because it may now be
# owned by root.
START_FILE=@SIPX_CONFDIR@/../init.d/sipxpbx
SIPXVXML=@SIPX_BINDIR@/sipXvxml
install-sipXvxml-no-setuid:
	mv $(SIPXVXML) $(SIPXVXML).tmp
	cp $(SIPXVXML).tmp $(SIPXVXML)
	chmod u=rwx,go=rx $(SIPXVXML)
	rm -f $(SIPXVXML).tmp
	mv $(START_FILE) $(START_FILE).tmp
	sed <$(START_FILE).tmp >$(START_FILE) \
	    -e $$'s/^\\([ \t]*chown .*\\/sipXvxml[ \t]*\\)$$/#\\1/' \
	    -e $$'s/^\\([ \t]*chmod .*\\/sipXvxml[ \t]*\\)$$/#\\1/'
	rm $(START_FILE).tmp
	chmod u=rwx,go=rx $(START_FILE)

# Check that there is no inconsistency in the dynamic libraries that all the
# binaries link to.
check-libraries:
	sipXpbx/doc/developer/check-libraries \
	    @bindir@/{sipXvxml,sipXproxy,sipregistrar,sipstatus,watchdog} \
	    @APACHE2_HTTPD@ \
	    @APACHE2_MOD@/{libmod_cplusplus.so,libmod_sipxauth.so}

# Set the logging levels for all the components to $(LEVEL),
# defaulting to DEBUG.
LEVEL=DEBUG
log-debug:
	cd @SIPX_CONFDIR@ ; \
	for FILE in \
	    mediaserver-config.in sipXproxy-config.in \
	    registrar-config.in sipxdialog-config.in sipxpark-config.in \
	    sipxpresence-config.in status-config.in voicemail.xml.in ; \
	do \
	    mv $$FILE $$FILE.tmp ; \
	    sed <$$FILE.tmp >$$FILE \
	        -e 's/_LOG_LEVEL *:.*$$/_LOG_LEVEL : $(LEVEL)/' \
		-e $$'s/^mediaserver\\.log\\.level[ \t].*$$/mediaserver.log.level  VXIString  $(LEVEL)/' \
	        -e 's/-log-level>[^<>]*</-log-level>$(LEVEL)</' ; \
	    rm $$FILE.tmp ; \
	done

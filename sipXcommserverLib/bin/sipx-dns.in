#!@BASH@

Action=RECORDS_ONLY
SipDomain=""
HostMax=0
ExitStatus=0
SerialNumber=00

showUsage() {
    cat <<USAGE

Usage:
    
    sipx-dns <sip-domain> <callserver-name>[/<ipaddr>]...
             [ { -o | --other } <system-name>[/<ipaddr>] ] ...
             [ { -z | --zone } [ { -s | --serial } <serial-suffix> ] ]

    Output DNS records in BIND format for sipXecs services.  The output
    is printed on the standard output.

    The --zone option adds a header to the output that makes it a complete
    zone file (see 'FULL ZONE' below).

      sip-domain   
          Is the domain that to be used as the domain part of your SIP
          addresses.  Typically, this is your top level domain name
          (example.com).  If any callserver or system names are not fully
          qualified (do not contain any '.' characters), then this domain
          is appended to those names to create fully qualified names.

      callserver-name/ipaddr

          This is the name of a sipXecs server in your domain that is running
          the sipXproxy service.

      --other system-name/ipaddr

    The callserver and other system names may also include the IP address
    (sipxecs.example.com/10.1.1.10).  If the address is given, then the A
    (name-to-address) record for the host name is generated. 

  FULL ZONE

     The --zone option causes a zone header to be output.  This output is 
     suitable as a complete zone file for 'bind'.  To make this useful, you MUST:

     - Provide either 'callserver' or 'other' system arguments for ALL systems
       in the domain.

     - Provide the '/ipaddr' part of each system (callserver or other) argument.

     - Every callserver is assumed to also be a DNS server for the domain 
       (this is recommended practice anyway for performance and stability 
       reasons).

     The '--serial' option accepts a number that is the number of times the 
     sipx-dns command output has been used in the same day to configure a running
     dns server.  This can be omitted if you are running the command only once.
     It is used to generate the zone serial number so that secondary servers 
     will recognize when the master server has been updated and trigger replication.

  REVERSE ZONES

    The PTR records for reverse (address to name) lookups are not
    generated.  They are nice to have for system management, but sipXecs
    does not need them.

USAGE
}

validateFullName() {
    case ${1} in 
        *.*)
            echo ${1}
            break
            ;;
        *.)
            echo ${1} | sed 's/.$//'
            break
            ;;
        *)
            echo "'${1}' is not a fully qualified name." 1>&2
            showUsage
            exit 1
            ;;
    esac
}

validateName() {
    case ${1} in 
        *.*)
            echo ${1}
            break
            ;;
        *.)
            echo ${1} | sed 's/.$//'
            break
            ;;
        *)
            echo ${1}.${SipDomain}
            ;;
    esac
}

while [ $# -ne 0 ]
do
    case ${1} in
        -h|-\?|--help)
            showUsage
            exit 0
            ;;

        -z|--zone)
            Action=FULL_ZONE
            ;;

        ##
        ## handle the 'end of options' marker
        ##
        --)
            ;;

        -o|--other)
            if [ $# -lt 2 ]
            then
                echo "Must specify <name/ip-address> with ${1}" 1>&2
                Action=USAGE
                break
            else
                ClusterHosts[${HostMax}]=${2}
                Type[${HostMax}]="OTHER"
                HostMax=$(($HostMax + 1))
                shift # consume the switch ( for n values, consume n-1 )
            fi
            ;;

        -s|--serial)
            if [ $# -lt 2 ]
            then
                echo "Must specify <serial-number> with ${1}" 1>&2
                Action=USAGE
                break
            else
                SerialNumber=`printf "%02d" $2`
                shift # consume the switch ( for n values, consume n-1 )
            fi
            ;;

        ##
        ## handle an unknown switch
        ##
        -*)
            echo "Unrecognized option '${1}'" 1>&2
            showUsage
            exit 1
            ;;

        *)
            if [ -z "${SipDomain}" ]
            then
                SipDomain=`validateFullName ${1}`
            else
                ClusterHosts[${HostMax}]=${1}
                Type[${HostMax}]="CALLSERVER"
                HostMax=$(($HostMax + 1))
            fi
            ;;
    esac           

    shift # always consume 1
done

HostMax=$(($HostMax - 1))

if [ $HostMax -eq -1 ]
then
    echo "Must specify servers" 1>&2
    showUsage
    exit 1
fi

for host in `seq 0 $HostMax`
  do
  thishost=${ClusterHosts[$host]}
  case $thishost in
      */*)
          hostname=`echo $thishost | cut -d / -f 1`
          Host[$host]=`validateName $hostname`
          Addr[$host]=`echo $thishost | cut -d / -f 2`
          ;;
      *)
          if [ "${Action}" = "FULL_ZONE" ]
          then
              cat <<EOF 1>&2
  When generating a full zone file, all systems must specify an ip address
    Address needed for '$thishost'.
EOF
              exit 1
          else
              Host[$host]=`validateName $thishost`
              Addr[$host]=""
          fi
          ;;
  esac
done

if [ "${Action}" = "FULL_ZONE" ]
then
    ZoneSerialNumber=`date +%Y%m%d${SerialNumber}`
    cat <<EOF
$TTL 1800
@       IN     SOA    ns1.${SipDomain}. root.${SipDomain}. (
                       ${ZoneSerialNumber} ; serial#
                       1800            ; refresh, seconds
                       1800            ; retry, seconds
                       1800            ; expire, seconds
                       1800 )          ; minimum TTL, seconds

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DNS Servers for '${SipDomain}'
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

EOF
    for host in `seq 0 $HostMax`
    do
        if [ "${Type[$host]}" = "CALLSERVER" ]
        then
            cat <<EOF
${SipDomain}.            IN     NS     ${Host[$host]}.
EOF
        fi
    done
fi

cat <<EOF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; IP Addresses
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

EOF

for host in `seq 0 $HostMax`
do
  if [ -n "${Addr[$host]}" ]
  then
      cat <<EOF
${Host[$host]}.	IN	A	${Addr[$host]}
EOF
  fi
done

cat <<EOF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Call Routing for SIP domain '${SipDomain}'
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

EOF
cat <<EOF

${SipDomain}.		IN	NAPTR	2 0 "s" "SIP+D2T" "" _sip._tcp.${SipDomain}.
${SipDomain}.		IN	NAPTR	2 0 "s" "SIP+D2U" "" _sip._udp.${SipDomain}.
EOF

for host in `seq 0 $HostMax`
do
    if [ "${Type[$host]}" = "CALLSERVER" ]
    then
        server=${Host[$host]}
        cat <<EOF

_sip._tcp.${SipDomain}.	IN	SRV	1 0 5060 $server.
_sip._udp.${SipDomain}.	IN	SRV	1 0 5060 $server.
EOF
    fi
done

for host in `seq 0 $HostMax`
do
    if [ "${Type[$host]}" = "CALLSERVER" ]
    then
        server=${Host[$host]}
        cat <<EOF

; $server routing for registry/redirect service
_sip._tcp.rr.$server.	IN	SRV	1   0 5070 $server.
EOF
        for backuphost in `seq 0 $HostMax`
        do
            if [ "${Type[$backuphost]}" = "CALLSERVER" ]
            then
                backup=${Host[$backuphost]}
                if [ "$server" != "$backup" ] 
                then
                    cat <<EOF
_sip._tcp.rr.$server.	IN	SRV	2 100 5070 $backup.
EOF
                fi
            fi
        done
    fi
done

cat <<EOF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

EOF

exit

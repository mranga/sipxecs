Name:     @PACKAGE@
Version:  @VERSION@
Release:  %{buildno}

Summary:  SIP Proxy Server
License:  Pingtel Commercial License
Group:    Productivity/Telephony/SIP/Servers
Vendor:   Pingtel Corp.
Packager: Pingtel <support@pingtel.com>
Url:      http://www.pingtel.com

Source:   %name-%version.tar.gz

Requires: sipxcommserverlib >= 3.11
Requires: sipxpbx >= 3.11

Prefix:    %_prefix
BuildRoot: %{_tmppath}/%name-%version-root

# should match sipXlib.m4:SIPX_VARDIR/upgrade
%define upgrade_archive_dir %{_localstatedir}/sipxdata/upgrade
%define this_archive %{name}-%{version}-%{release}.tgz
%define this_archive_cdr %{name}-cdr-%{version}-%{release}.tgz
%define sipxpbxvarlib %{_var}/lib/sipxpbx

%description
RFC 3261 compliant SIP proxy called sipXproxy:
The sipXproxy is used in the sipXpbx project. However it may be used
independently from the PBX as a stand-alone SIP proxy. The sipXregistry 
may also be used with the sipXproxy though it is not necessary. The 
sipXproxy provides service level routing, parallel and serial forking
and AAA services.

%if %{_vendor} == suse
%debug_package
%endif

%package cdr
Requires: %name >= %version
Requires: stunnel
Requires: ruby
Requires: ruby-dbi

Requires: rubygems
%if %{_vendor} == redhat
Requires: ruby-libs
Requires: ruby-postgres >= 0.7.1
%endif

%if %{_vendor} == suse
Requires: rubygem-ruby-postgres >= 0.7.1
%endif

Requires: sipxcommserverlib >= %version
Group:    Productivity/Telephony/SIP/Servers
Vendor: SIPfoundry
Summary: CDR (Call Distribution Record) aggregration

%description cdr
Gather CSE (Call State Events) for one or more proxy servers and generate
postgres database records from data.

%package devel
Requires: %name
Group: Development/Libraries
Vendor: SIPfoundry
Summary: Internal documentation for %name 
Requires: sipxcommserverlib-devel >= 3.11

%description devel
Internal class documentation for the proxy classes

%prep
%setup -q

%build
%configure --enable-rpmbuild --enable-cdr @CONFIGURE_OPTIONS@
cp config.log %name.configlog
make

%install

# makeinstall RPM macro doesn't leverage DESTDIR but instead overrides
# libdir, bindir, etc just for make install. This not copesetic w/how
# our makefiles are built, they'd rather preserve libdir, and use 
# DESTDIR when copying/moving/creating files.  The approach we're taking
# is quite standard, so it's surprising RPM's makeinstall macro is
# the way it is.
rm -rf $RPM_BUILD_ROOT
make DESTDIR=$RPM_BUILD_ROOT install

%define upgrade_archive_root ${RPM_BUILD_ROOT}%{upgrade_archive_dir}
mkdir -p %{upgrade_archive_root}
# Make a 'current' tar file of etc for upgrade 
tar --directory ${RPM_BUILD_ROOT} \
    -czf %{upgrade_archive_root}/%{this_archive} \
    etc
# Do it again for cdr (same contents, different name)
tar --directory ${RPM_BUILD_ROOT} \
    -czf %{upgrade_archive_root}/%{this_archive_cdr} \
    etc


%clean
rm -rf $RPM_BUILD_ROOT

%files
%defattr(644,root,root,755)

%doc CONTRIBUTORS ChangeLog %name.configlog
%attr(755,root,root) %{_bindir}/sipXproxy.sh
%attr(755,root,root) %{_bindir}/sipXproxy
%attr(755,root,root) %{_bindir}/%name-config
%attr(644,root,root) %{_datadir}/sipxecs/process.d/sipXproxy-process.xml
%attr(644,root,root) %{_datadir}/sipxecs/process.d/sipxcallresolver-process.xml
%attr(644,root,root) %{_datadir}/sipxecs/process.d/sipxcallresolver-agent-process.xml
%attr(755,root,root) %{_datadir}/sipxecs/schema/forwardingrules.xsd
%attr(755,root,root) %{_datadir}/sipxecs/schema/nattraversalrules.xsd

%attr(755,root,root) %{_libdir}/authplugins/libEnforceAuthRules.la
%attr(755,root,root) %{_libdir}/authplugins/libEnforceAuthRules.a
%attr(755,root,root) %{_libdir}/authplugins/libEnforceAuthRules.so*

%attr(755,root,root) %{_libdir}/authplugins/libCallerAlias.la
%attr(755,root,root) %{_libdir}/authplugins/libCallerAlias.a
%attr(755,root,root) %{_libdir}/authplugins/libCallerAlias.so*

%attr(755,root,root) %{_libdir}/authplugins/libTransferControl.la
%attr(755,root,root) %{_libdir}/authplugins/libTransferControl.a
%attr(755,root,root) %{_libdir}/authplugins/libTransferControl.so*

%attr(755,root,root) %{_libdir}/authplugins/libNatTraversalAgent.la
%attr(755,root,root) %{_libdir}/authplugins/libNatTraversalAgent.a
%attr(755,root,root) %{_libdir}/authplugins/libNatTraversalAgent.so*

%attr(755,root,root) %{_libdir}/authplugins/libMSFT_ExchangeTransferHack.la
%attr(755,root,root) %{_libdir}/authplugins/libMSFT_ExchangeTransferHack.a
%attr(755,root,root) %{_libdir}/authplugins/libMSFT_ExchangeTransferHack.so*

%attr(755,root,root) %{_libdir}/authplugins/libSubscriptionAuth.la
%attr(755,root,root) %{_libdir}/authplugins/libSubscriptionAuth.a
%attr(755,root,root) %{_libdir}/authplugins/libSubscriptionAuth.so*

%attr(755,root,root) %{_libdir}/authplugins/libEmergencyNotify.la
%attr(755,root,root) %{_libdir}/authplugins/libEmergencyNotify.a
%attr(755,root,root) %{_libdir}/authplugins/libEmergencyNotify.so*

# The configuration directory needs to be writeable because
# config files are generated from templates via config.defs
%dir %attr(755,@SIPXPBXUSER@,@SIPXPBXGROUP@) %{_sysconfdir}/sipxpbx

%{upgrade_archive_dir}/%{this_archive}
# Where does this come from?
%{upgrade_archive_dir}/%{name}-previous.tgz

%files devel
%defattr(644,root,root,755)
%docdir %{_datadir}/doc/sipxecs/%name
%{_datadir}/doc/sipxecs/%name

%pre
sipx-upgrade -p sipxproxy -c

%post
sipx-upgrade -p sipxproxy -u --bdir %{_bindir} --ddir %{_datadir} --cdir %{_sysconfdir} --sdir %{_localstatedir}

%define current_archive %{upgrade_archive_dir}/%{name}-current.tgz
%define previous_archive %{upgrade_archive_dir}/%{name}-previous.tgz
if [ -f %{current_archive} ]; then
  mv %{current_archive} %{previous_archive}
fi
mv %{upgrade_archive_dir}/%{this_archive} %{current_archive}

pkg-upgrade --previous %{previous_archive} --current %{current_archive}

%files cdr
%defattr(644,root,root,755)
%attr(755,root,root) %{_libexecdir}/sipXecs/setup.d/sipxcallresolver-setup

%config(noreplace) %attr(644,@SIPXPBXUSER@,@SIPXPBXGROUP@) %{_sysconfdir}/sipxpbx/sipxcallresolver-agent-config
%config(noreplace) %attr(644,@SIPXPBXUSER@,@SIPXPBXGROUP@) %{_sysconfdir}/sipxpbx/cdr/*

%dir %attr(755,@SIPXPBXUSER@,@SIPXPBXGROUP@) %{_sysconfdir}/sipxpbx/cdr
%attr(755,root,root) %{sipxpbxvarlib}/sipxcallresolver-2.0.0.gem
%attr(755,root,root) %{_bindir}/sipxcallresolver.sh
%attr(755,root,root) %{_bindir}/sipxcallresolver-agent.sh

%{upgrade_archive_dir}/%{this_archive_cdr}
# Where does this come from in the main package?
#%{upgrade_archive_dir}/%{name}-cdr-previous.tgz

%post cdr

%define gem_dir %(ruby -rrbconfig -e 'puts File::join(Config::CONFIG["libdir"],"/ruby/gems")')
%define rb_ver %(ruby -rrbconfig -e 'puts Config::CONFIG["ruby_version"]')
%define gem_home %{gem_dir}/%{rb_ver}

gem install --no-rdoc --local --install-dir %{gem_home} %{sipxpbxvarlib}/sipxcallresolver-*.gem >/dev/null 2>&1

if [ -f %{_sysconfdir}/cron.daily/callresolver_run ]; then
  rm -f %{_sysconfdir}/cron.daily/callresolver_run
fi

%define current_archive %{upgrade_archive_dir}/%{name}-cdr-current.tgz
%define previous_archive %{upgrade_archive_dir}/%{name}-cdr-previous.tgz
if [ -f %{current_archive} ]; then
  mv %{current_archive} %{previous_archive}
fi
mv %{upgrade_archive_dir}/%{this_archive_cdr} %{current_archive}

pkg-upgrade --previous %{previous_archive} --current %{current_archive}

%preun cdr
# Uninstall the sipxcallresolver gem, unless this RPM uninstall is part of
# an upgrade.
#   see http://fedoraproject.org/wiki/Packaging/ScriptletSnippets
if [ "$1" = "0" ] ; then
  gem uninstall sipxcallresolver >/dev/null 2>&1
fi
